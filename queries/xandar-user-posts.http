# -*- restclient -*-
#
# Queries against the /xandar/user-posts endpoints
#

# variables
:date := (shell-command-to-string "echo -n (date +%Y-%m-%d-%M-%s)")
:host = 127.0.0.1:8001
:path = xandar/user-posts
:json = application/json


#
# Get all posts
#
GET http://:host/:path?sort=post.link&include=post.link,post.title,title

#
# Run a HEAD request against the user-posts collection
#
HEAD http://:host/:path?where=(post.title contains 'vim')

#
# Find by post title
#
GET http://:host/:path?where=(post.title contains 'monad')&per_page=2

#
# Find by subscription id
#
GET http://:host/:path?where=(subscriptionId eq 56d7df90c788cb1d6eb92789)&include=createdAt,updatedAt,title,subscriptionId

#
# Find by subscription id
#
GET http://:host/:path?where=(subscriptionId eq 58a3fc135984184d4f000002)&include=createdAt,updatedAt,title,subscriptionId,tags

#
# Count by subscription ids (head)
#
HEAD http://:host/:path?where=(subscriptionId in [56d7d89dc788cb1d6eb919b1, 56d7df90c788cb1d6eb92789, 56d7ddf5c788cb1d6eb919d7])&include=title,feedId,subscriptionId,link,tags

#
# Count by subscription ids (head) 2
#
HEAD http://:host/:path?where=(subscriptionId in [56d7defcc788cb1d6eb922d8, 56d7df24c788cb1d6eb92491, 56d7e123c788cb1d6eb934a0])&include=title,feedId,subscriptionId,link,tags

#
# Find by subscription ids (head)
#
GET http://:host/:path?where=(subscriptionId in [56d7defcc788cb1d6eb922d8, 56d7df24c788cb1d6eb92491, 56d7e123c788cb1d6eb934a0])&sort=post.title&per_page=10&include=postId,tags,subscriptionId,post.title

#
# Get unread counts
#
HEAD http://:host/:path?where=(subscriptionId eq 56e5cbdf1432afe53933798b and read eq false)

#
# Find by id
#
GET http://:host/:path?where=(_id eq 56fac40f48c80e51524d5889-56d7df90c788cb1d6eb92789)&include=createdAt,updatedAt,title,feedId,post.title

#
# Find by post tags
#
GET http://:host/:path?where=(tags in ['haskell','emacs'])&per_page=20&include=tags,post.title,title

#
# Find by empty list query
#
GET http://:host/:path?where=(tags in [])

#
# Find with invalid query 1
#
GET http://:host/:path?where=(tags eq ['haskell','emacs'])

#
# Find all unread
#
GET http://:host/:path?where=(read eq false)&per_page=5&page=1&include=title,post.title,post.guid,createdAt&sort=-createdAt

#
# Find by feed title
#
GET http://:host/:path?where=(post.title contains 'activity')&per_page=3&page=1

#
# Find by title partial result
#
GET http://:host/:path?where=(post.title contains 'monad')&include=post.title

#
# Get a single post
#
GET http://:host/:path/1

#
# Run a HEAD request against a single post
#
HEAD http://:host/:path/1

#
# Delete a single post
#
DELETE http://:host/:path/57f422da966d70b95f5e5228-56d7e0c2c788cb1d6eb93217

#
# Get post by id (existing)
#
GET http://:host/:path/581a32d909a64c359672ec0b-5814f2d909a64c359672dded

#
# Get post by id (new)
#
GET http://:host/:path/56d7de0dc788cb1d6eb91ac6-56d7de0dc788cb1d6eb91abc

#
# Create a single post (subscription not found)
#
POST http://:host/:path
Content-Type: :json
{           
  "postId": "56d7d88bc788cb1d6eb9199d",
  "subscriptionId": "56d7d89dc788cb1d6eb919b1",
  "title": "Sample user post title",
  "read": true,
  "tags": ["technology", "programming"]
}

#
# Create a single post
#
POST http://:host/:path
Content-Type: :json
{           
  "postId": "56d7de0dc788cb1d6eb91abf",
  "feedId": "56d7de0dc788cb1d6eb91abb",
  "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
  "read": true,
  "tags": ["technology", "programming"]
}

#
# Create a single post invalid
#
POST http://:host/:path
Content-Type: :json
{           
  "postId": "56d7de0dc788cb1d6eb91abf",
  "feedId": "56d7de0dc788cb1d6eb91abb",
  "read": true,
  "tags": ["technology", "programming"]
}

#
# Create a single post (post not found)
#
POST http://:host/:path
Content-Type: :json
{           
  "postId": "56d7d88bc788cb1d6eb9199k",
  "subscriptionId": "56d7df90c788cb1d6eb92789",
  "title": "Sample user post title",
  "read": true,
  "tags": ["technology", "programming"]
}

#
# Replace a single post
#
PUT http://:host/:path/56d7de0dc788cb1d6eb91ac6-56d7de0dc788cb1d6eb91abf
Content-Type: :json
{           
  "read": true,
  "title": "Title replaced",
  "tags": ["technology", "programming"]
}

#
# Modify a single post
#
PATCH http://:host/:path/56d7de0dc788cb1d6eb91ac6-56d7de0dc788cb1d6eb91abf
Content-Type: :json
{
  "read": true,
  "tags": [
    "technology",
    "programming",
    "haskell"
  ]
}

#
# Create multiple posts
#
POST http://:host/:path
Content-Type: :json
[
  {
    "postId": "56d7de0dc788cb1d6eb91ac2",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac3",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac4",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56k7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  }
]

#
# Replace multiple posts
#
PUT http://:host/:path
Content-Type: :json
[
  {
    "postId": "56d7de0dc788cb1d6eb91ac2",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "title": "Multi replace",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac3",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac4",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56k7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  }
]

#
# Modify multiple posts
#
PATCH http://:host/:path
Content-Type: :json
[
  {
    "postId": "56d7de0dc788cb1d6eb91ac2",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac3",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "haskell", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac4",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56d7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "subscriptionId": "56k7de0dc788cb1d6eb91ac6",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  },
  {
    "postId": "56d7de0dc788cb1d6eb91ac5",
    "feedId": "56d7de0dc788cb1d6eb91abb",
    "tags": [ "javascript", "programming" ]
  }
]

#
# Patch multiple posts 2
#
PATCH http://:host/:path
Content-Type: :json
[
  {
    "_id": "56d7defcc788cb1d6eb922d8-5818816509a64c359672e696",
    "postId": "5818816509a64c359672e696",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology", "tag1", "tag2"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-56d7defcc788cb1d6eb922cb",
    "postId": "56d7defcc788cb1d6eb922cb",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology", "tagA", "tagB", "tagC"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-579f3956ed521f1f17052fb1",
    "postId": "579f3956ed521f1f17052fb1",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "machine-learning", "database", "writing"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-56fe4deb48c80e51524d7685",
    "postId": "56fe4deb48c80e51524d7685",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology", "javascript", "facebook", "social"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-57594299ed521f1f17021e12",
    "postId": "57594299ed521f1f17021e12",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology", "haskell", "programming", "emacs"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-574ed076ed521f1f1701e845",
    "postId": "574ed076ed521f1f1701e845",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology", "vim"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-57765115ed521f1f17035cdd",
    "postId": "57765115ed521f1f17035cdd",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-57c82395ed521f1f170735a0",
    "postId": "57c82395ed521f1f170735a0",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-5790e9cded521f1f17046a40",
    "postId": "5790e9cded521f1f17046a40",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology"
    ]
  },
  {
    "_id": "56d7defcc788cb1d6eb922d8-5818717a09a64c359672e67e",
    "postId": "5818717a09a64c359672e67e",
    "subscriptionId": "56d7defcc788cb1d6eb922d8",
    "tags": [
      "technology"
    ]
  }
]