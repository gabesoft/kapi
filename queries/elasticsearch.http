# -*- restclient -*-
#
# Elasticsearch queries against the dask index
#

# variables
:host = 127.0.0.1:9200
:coll = post
:index1 = .prod-dask-rss-v1
:index2 = kapi-xandar

#
# Get version
#
GET http://:host

#
# Get cluster health
#
GET http://:host/_cluster/health?pretty

#
# Change the root logger level (TRACE,DEBUG,INFO,WARN)
#
PUT http://:host/_cluster/settings
{
  "transient": {"logger._root": "TRACE"}
}

#
# Display all shards
#
GET http://:host/_cat/shards

#
# Verify index
#
GET http://:host/:index2

#
# Get all indices
#
GET http://:host/_cat/indices?v

#
# Get all mappings
#
GET http://:host/:index2/_all/_mapping

#
# Copy an index
#
POST http://:host/_reindex
{
  "source": {
    "index": ":index1"
  },
  "dest": {
    "index": ":index2"
  }
}

#
# Get all posts matching a query
#
GET http://:host/:index2/_search?q=title:haskell

#
# Index a document
#
PUT http://:host/:index2/:coll/2
{
  "post": {
    "summary": null,
    "image": null,
    "inlineStatus": null,
    "link": "https://www.reddit.com/r/haskell/comments/54niix/what_do_you_use_arithmoi_for/",
    "date": "2016-09-26T23:05:53.000Z",
    "guid": "t3_54niix",
    "author": "/u/Bodigrim",
    "comments": null,
    "title": "What do you use arithmoi for?",
    "description": "<!-- SC_OFF --><div class=\"md\"><p>I am the co-maintainer (with @cartazio) of <code>arithmoi</code>package (<a href=\"https://hackage.haskell.org/package/arithmoi\">https://hackage.haskell.org/package/arithmoi</a>), which provides utilities for number-theoretical computations. I am looking for areas to improve, and getting some feedback is invaluable for clear vision. </p><p>I'd be incredibly grateful for answers to the following questions.</p><p>What are you using <code>arithmoi</code> for? What are the main issues from the user's perspective? Which (number-theoretical) domains require better support?</p></div><!-- SC_ON -->   submitted by   <a href=\"https://www.reddit.com/user/Bodigrim\"> /u/Bodigrim </a><br/><span><a href=\"https://www.reddit.com/r/haskell/comments/54niix/what_do_you_use_arithmoi_for/\">[link]</a></span><span><a href=\"https://www.reddit.com/r/haskell/comments/54niix/what_do_you_use_arithmoi_for/\">[comments]</a></span>",
    "version": 0
  },
  "postId": "57e9f803d5ec56510904c9db",
  "subscriptionId": "57e9f803d5ec56510904c9f4",
  "feedId": "57e9f802d5ec56510904c9d9",
  "updatedAt": "2016-09-27T04:53:11.163Z",
  "createdAt": "2016-09-27T04:39:31.460Z",
  "userId": "56d7cc3fccee17506699e735",
  "title": "Haskell  Reddit",
  "tags": [
    "haskell",
    "reddit"
  ],
  "read": true
}

#
# Get a document by id
#
GET http://:host/:index2/:coll/2

#
# Get a document by id 2
#
GET http://:host/:index2/:coll/56d7df90c788cb1d6eb92789-56d7d88bc788cb1d6eb9199d

#
# Get a document by _uid
#
GET http://:host/:index2/_search
{
  "query": {
    "ids": {
      "type": "post",
      "values": ["1", "2", "5"]
    }
  }
}

#
# Get sorted
#
GET http://:host/:index2/_search
{
  "size": 20,
  "from": 0,
  "query": {
    "match_all": {}
  },
  "track_scores": false,
  "fields": ["post.title"],
  "sort": {
    "post.title": {
      "order": "asc"
    }
  }
}

#
# Perform a search 1
#
GET http://:host/:index2/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "post.title": {
              "query": "reader monad",
              "type": "phrase"
            }
          }
        }
      ]
    }
  },
  "track_scores": false
}

#
# Perform a search 2
#
GET http://:host/:index1/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "post.title": {
              "query": "reader monad"
            }
          }
        }
      ]
    }
  },
  "track_scores": false
}

#
# Perform a search 3
#
GET http://:host/:index1/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "post.title": "reader monad"
          }
        },
        {
          "match_phrase": {
            "post.description": {
              "query": "reader monad",
              "boost": 2
            }
          }
        }
      ]
    }
  }
}

#
# Perform a search with partial result
#
GET http://:host/:index1/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "term": {
      "post.title": {
        "value": "monad"
      }
    }
  },
  "track_scores": false,
  "fields": [
    "post.title",
    "post.guid"
  ]
}

#
# Perform a search with partial result 2
#
GET http://:host/:index1/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "term": {
      "title": {
        "value": "activity"
      }
    }
  },
  "track_scores": false,
  "fields": [ "title" ]
}

#
# Perform a search with terms query
#
GET http://:host/:index1/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "constant_score": {
      "filter": {
        "terms": {
          "tags": [
            "haskell",
            "programming"
          ]
        }
      }
    }
  },
  "track_scores": false,
  "fields": [
    "post.title",
    "post.guid"
  ]
}

#
# Perform a search with terms query (empty)
#
GET http://:host/:index1/_search
{
  "size": 10,
  "from": 0,
  "query": {
    "constant_score": {
      "filter": {
        "terms": {
          "tags": []
        }
      }
    }
  },
  "track_scores": false,
  "fields": [
    "post.title",
    "post.guid"
  ]
}

#
# Perform an aggregate search
#
GET http://:host/:index1/_search
{
  "aggregations": {
    "unreadCountsPerSub": {
      "terms": {
        "field": "subscriptionId"
      }
    }
  },
  "size": 0,
  "from": 0,
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "read": {
              "value": "false"
            }
          }
        },
        {
          "terms": {
            "subscriptionId": [
              "56d7e0bec788cb1d6eb931ff",
              "56f3514a7ae0ece73a37defc",
              "56d7dfadc788cb1d6eb9286b",
              "56d7de09c788cb1d6eb91a98",
              "56d7deafc788cb1d6eb91f7c",
              "56f204fda8b967f57a2ce374",
              "57eb6a18b9d714a86ed963fb",
              "576487ebed521f1f17029dc9",
              "56e5b14c1432afe539337131",
              "56d7dedfc788cb1d6eb92181",
              "56d7df60c788cb1d6eb9267a",
              "56d7e014c788cb1d6eb92b93",
              "56d7ddf3c788cb1d6eb919c1",
              "56d7e14ac788cb1d6eb93574",
              "56de7f9471d07f1a44d224b6",
              "5743acf5ed521f1f1701b0b7",
              "56e5b5271432afe5393376ff",
              "56e5b18c1432afe5393371b5",
              "56eb76c43b263198218576bf",
              "56d7e0a7c788cb1d6eb93105",
              "56d7de70c788cb1d6eb91d41",
              "56d7e041c788cb1d6eb92e33",
              "56db9335fa51ced05cd8dfa1",
              "56d7de9ec788cb1d6eb91ee4",
              "56d7e14bc788cb1d6eb93582",
              "56d7df90c788cb1d6eb92789",
              "56d7ddf5c788cb1d6eb919d7",
              "56d7de0dc788cb1d6eb91ac6",
              "56d7e0a7c788cb1d6eb9310b",
              "56d7de07c788cb1d6eb91a82",
              "58b5244e5984182c66000012",
              "56d7e029c788cb1d6eb92c73",
              "56e5b0481432afe539336eaf",
              "56d7ddfbc788cb1d6eb91a06",
              "57e9f8bed5ec56510904ca3f",
              "56d7e045c788cb1d6eb92e3f",
              "56e5b3d31432afe539337597",
              "56e5b2501432afe539337232",
              "56d7de04c788cb1d6eb91a6c",
              "570fbde3a12d116e77cf8e5b",
              "57f34664966d70b95f5e4fa3",
              "56d7df78c788cb1d6eb926fc",
              "56e5b2c21432afe5393373a8",
              "570db7b1669e9f6d60f078a0",
              "56e5b0731432afe539336f99",
              "570d72fb669e9f6d60f0766e",
              "56d7de0ec788cb1d6eb91ad2",
              "56e5b2d81432afe539337412",
              "56f422467ae0ece73a37e567",
              "56e60f7d1432afe539337b7e",
              "56e5c9cb1432afe53933789e",
              "56d7e167c788cb1d6eb935f3",
              "56e5cc021432afe539337994",
              "56d7de19c788cb1d6eb91b22",
              "56d7e1b2c788cb1d6eb9396a",
              "56d7e064c788cb1d6eb92ea2",
              "5792e720ed521f1f1704877f"
            ]
          }
        }
      ]
    }
  },
  "track_scores": false
}